apiVersion: v1
kind: Template
metadata:
  name: minio
objects:
# Containers included in this pod::
# (2) Minio - Object storage destination for flows
# (3) minio-mc - create bucket in Minio (init only container)
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: minio
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: minio
    template:
      metadata:
        labels:
          app: minio
      spec:
        containers:
        - image: minio/minio
          imagePullPolicy: Always
          name: minio
          args:
          - server
          - /tmp/data
          env:
          - name: MINIO_ACCESS_KEY
            value: user
          - name: MINIO_SECRET_KEY
            value: password
        - image: minio/mc
          imagePullPolicy: Always
          name: minio-mc
          command: ["/bin/sh"]
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
          args:
          - -c
          - >
            set -x;
            while [ $(curl -sw '%{http_code}' "http://localhost:9000" -o /dev/null) -ne 403 ]; do
              echo "Waiting for minio server to start (autentication failed is expected)";
              sleep 10;
            done;
            echo "Creating bucket";
            /usr/bin/mc config host add local http://localhost:9000 user password --api S3v4;
            /usr/bin/mc rm -r --force local/bucket;
            /usr/bin/mc mb local/bucket;
            echo "Done.";
            while true; do
              echo "====> Bucket size: ";
              /usr/bin/mc du local/bucket;
              echo "====> Listing files (in fake folder and in index folder) ";
              echo "";
              /usr/bin/mc ls local/bucket/fake --summarize -r | tail -n 10;
              /usr/bin/mc ls local/bucket/index --summarize -r | tail -n 10;
              sleep 60;
            done;
# Service for minio
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: minio
    name: minio
  spec:
    ports:
      - name: www
        port: 9000
        protocol: TCP
        targetPort: 9000
    selector:
      app: minio
    sessionAffinity: None
    type: NodePort